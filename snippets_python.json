{
	"GCD": {
		"prefix": "gcd",
		"body":[
			"import fractions",
			"from functools import reduce",
			"",
			"def gcd(*numbers):",
			"\treturn reduce(fractions.gcd, numbers)",
			"",
			"def gcd_list(numbers):",
			"\treturn reduce(fractions.gcd, numbers)"
		],
		"description": "最大公約数を求める"
	},

	"LCM": {
		"prefix": "lcm",
		"body": [
			"from fractions import gcd",
			"",
			"def lcm(m, n):",
			"\treturn (m * n) // gcd(m, n)",
			"",
			"def lcm_list(a):",
			"\tx = a[0]",
			"\tfor i in range(1, len(a)):",
			"\t\tx = (x * a[i]) // gcd(x, a[i])",
			"\treturn x"
		],
		"description": "最小公倍数を求める"
	},

	"IS_PRIME": {
		"prefix": "is_prime",
		"body": [
			"def is_prime(n):",
			"\tif n == 1:",
			"\t\treturn False",
			"\tfor i in range(2,int(n**0.5)+1):",
			"\t\tif n % i == 0:",
			"\t\t\treturn False",
			"\treturn True"
		],
		"description": "素数判定"
	},

	"DIGSUM": {
		"prefix": "digsum",
		"body": [
			"def digsum(n):",
			"\ttotal = 0",
			"\twhile n > 0:",
			"\t\ttotal += n%10",
			"\t\tn /= 10",
			"\t\tn = int(n)",
			"\treturn total"
		],
		"description": "桁和"
	},

	"LIST_INPUT": {
		"prefix": "list(map(int, input().split()))",
		"body": [
			"list(map(int, input().split()))"
		],
		"description": "listの標準入力"
	},

	"NUMER_INPUT": {
		"prefix": "map(int, input().split())",
		"body": [
			"map(int, input().split())"
		],
		"description": "numberの標準入力"
	},

	"FACTORIZATION": {
		"prefix": "factorization",
		"body": [
			"def factorization(n):",
			"\tarr, temp = [], n",
			"\tfor i in range(2, int(-(-n**0.5//1))+1):",
			"\t\tif temp%i==0:",
			"\t\t\tcnt=0",
			"\t\t\twhile temp%i==0:",
			"\t\t\t\tcnt+=1",
			"\t\t\t\ttemp //= i",
			"\t\t\tarr.append([i, cnt])",
			"\tif temp!=1:",
			"\t\tarr.append([temp, 1])",
			"\tif arr==[]:",
			"\t\tarr.append([n, 1])",
			"\treturn arr"
		],
		"description": "素因数分解"
	},

	"KIRIAGE_KIRISUTE": {
		"prefix": "kiriage_kirisute",
		"body": [
			"from math import ceil, floor",
			"#ceil()  # 切り上げ。常にup",
			"#floor()  # 切り捨て。常にdown",
			"#int()  # 常に0に近く（正負で挙動違う）",
			"#round(f),  round(f, 1)  # 四捨五入（第二引数で小数点桁数を指定）"  
		],
		"description": "切り上げや切り捨て"
	},

	"KAIBUN": {
		"prefix": "kaibun",
		"body": [
			"def kaibun(s):",
			"\tn_iter = len(s)//2",
			"\tans = True",
			"\tfor i in range(n_iter):",
			"\t\tif s[i] != s[-1-i]:",
			"\t\t\tans = False",
			"\t\t\tbreak",
			"\treturn ans"
		],
		"description": "文字の回文判定"
	},

	"ITERTOOLS": {
		"prefix": "itertools",
		"body": [
			"from itertools import (",
			"\taccumulate,  # 累積和のイテレータ",
			"\tgroupby,  # 値をkey,同じ値の集まりをgroup",
			"\tpermutations,  # 順列",
			"\tcombinations,  # 組み合わせ",
			"\tproduct,  # 重複あり順列（直積, 深いネストにも使える）",
			")"
		],
		"description": "itertoolsの各モジュール"
	},

	"COUNTER": {
		"prefix": "counter",
		"body": [
			"from collections import Counter",
			"#l = ['a', 'a', 'a', 'a', 'b', 'c', 'c']",
			"#c = Counter(l)",
			"#print(c)   # Counter({'a': 4, 'c': 2, 'b': 1})"
		],
		"description": "リストの各要素をカウントする"
	},

	"DEQUE": {
		"prefix": "deque",
		"body": [
			"from collections import deque",
			"#S = deque(['x', 'y'])",
			"#print(S)   ->   deque(['x', 'y'])"
		],
		"description": "キュー"
	},

	"FACTORIAL": {
		"prefix": "factorial",
		"body": [
			"from math import factorial    #階乗計算",
			"#print(math.factorial(5))   ->   120"
		],
		"description": "階乗計算"
	}
}