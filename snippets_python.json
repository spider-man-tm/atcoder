{
	"最大公約数を求める": {
		"prefix": "gcd",
		"body":[
			"from math import gcd   # gcd(6, 4) -> 2",
			"from functools import reduce",
			"",
			"def gcd_list(numbers):",
			"\treturn reduce(gcd, numbers)"
		],
		"description": "最大公約数を求める"
	},

	"最小公倍数を求める": {
		"prefix": "lcm",
		"body": [
			"from math import gcd",
			"",
			"def lcm(m, n):",
			"\treturn (m * n) // gcd(m, n)",
			"",
			"def lcm_list(a):",
			"\tx = a[0]",
			"\tfor i in range(1, len(a)):",
			"\t\tx = (x * a[i]) // gcd(x, a[i])",
			"\treturn x"
		],
		"description": "最小公倍数を求める"
	},

	"素数判定": {
		"prefix": "is_prime",
		"body": [
			"def is_prime(n):",
			"\tif n == 1:",
			"\t\treturn False",
			"\tfor i in range(2,int(n**0.5)+1):",
			"\t\tif n % i == 0:",
			"\t\t\treturn False",
			"\treturn True"
		],
		"description": "素数判定"
	},

	"桁和": {
		"prefix": "digsum",
		"body": [
			"def digsum(n):",
			"\ttotal = 0",
			"\twhile n > 0:",
			"\t\ttotal += n%10",
			"\t\tn /= 10",
			"\t\tn = int(n)",
			"\treturn total"
		],
		"description": "桁和"
	},

	"listの標準入力": {
		"prefix": "list(map(int, input().split()))",
		"body": [
			"list(map(int, input().split()))"
		],
		"description": "listの標準入力"
	},

	"numberの標準入力": {
		"prefix": "map(int, input().split())",
		"body": [
			"map(int, input().split())"
		],
		"description": "numberの標準入力"
	},

	"stringをリストで標準入力": {
		"prefix": "list(input().split())",
		"body": [
			"list(input().split())"
		],
		"description": "stringをリストで標準入力"
	},

	"素因数分解": {
		"prefix": "factorization",
		"body": [
		  "# O(NloglogN)",
		  "def eratosthenes_sieve(n):",
		  "    is_prime = [True] * (n + 1)",
		  "    is_prime[0] = is_prime[1] = False",
		  "    for p in range(2, n + 1):",
		  "        if is_prime[p]:",
		  "            for q in range(2 * p, n + 1, p):",
		  "                is_prime[q] = False",
		  "    return is_prime",
		  "",
		  "",
		  "def factorization(n):",
		  "    arr, temp = [], n",
		  "    table = eratosthenes_sieve(n)",
		  "",
		  "    for i in range(2, int(-(-n**0.5//1))+1):",
		  "        if table[i]:",
		  "            if temp%i==0:",
		  "                cnt=0",
		  "                while temp%i==0:",
		  "                    cnt+=1",
		  "                    temp //= i",
		  "                arr.append([i, cnt])",
		  "    if temp!=1:",
		  "        arr.append([temp, 1])",
		  "    if arr==[]:",
		  "        arr.append([n, 1])",
		  "    return arr",
		  "",
		  "# print(factorization(10332))",
		  "# [[2, 2], [3, 2], [7, 1], [41, 1]]"
		],
		"description": "素因数分解"
	},

	"切り上げや切り捨て": {
		"prefix": "kiriage_kirisute",
		"body": [
			"from math import ceil, floor",
			"#ceil()  # 切り上げ。常にup",
			"#floor()  # 切り捨て。常にdown",
			"#int()  # 常に0に近く（正負で挙動違う）",
			"#round(f),  round(f, 1)  # 四捨五入（第二引数で小数点桁数を指定）"  
		],
		"description": "切り上げや切り捨て"
	},

	"文字の回文判定": {
		"prefix": "kaibun",
		"body": [
			"def kaibun(s):",
			"\tn_iter = len(s)//2",
			"\tans = True",
			"\tfor i in range(n_iter):",
			"\t\tif s[i] != s[-1-i]:",
			"\t\t\tans = False",
			"\t\t\tbreak",
			"\treturn ans"
		],
		"description": "文字の回文判定"
	},

	"itertoolsの各モジュール": {
		"prefix": "itertools",
		"body": [
			"from itertools import (",
			"\taccumulate,  # 累積和のイテレータ",
			"\tgroupby,  # 値をkey,同じ値の集まりをgroup",
			"\tpermutations,  # 順列",
			"\tcombinations,  # 組み合わせ",
			"\tproduct,  # 重複あり順列（直積, 深いネストにも使える）",
			"\tcombinations_with_replacement,  # 重複あり組み合わせ",
			")"
		],
		"description": "itertoolsの各モジュール"
	},

	"リストの各要素をカウントする": {
		"prefix": "counter",
		"body": [
			"from collections import Counter",
			"#l = ['a', 'a', 'a', 'a', 'b', 'c', 'c']",
			"#c = Counter(l)",
			"#print(c)   # Counter({'c': 2, 'a': 4, 'b': 1})  順番は適当",
			"#c = Counter(l).most_common()",
			"#print(c)   # [('a', 4), ('c', 2), ('b', 1)]"
		],
		"description": "リストの各要素をカウントする"
	},

	"キュー": {
		"prefix": "deque",
		"body": [
		  "from collections import deque",
		  "# S = deque(['x', 'y'])",
		  "# print(S)   ->   deque(['x', 'y'])",
		  "# append  ->  要素の追加",
		  "# popleft  ->  キュー",
		  "# pop  ->  スタック"
		],
		"description": "キュー"
	  },

	"階乗計算": {
		"prefix": "factorial",
		"body": [
			"from math import factorial    #階乗計算",
			"#print(math.factorial(5))   ->   120"
		],
		"description": "階乗計算"
	},

	"二分探索": {
		"prefix": "bisect",
		"body": [
			"from bisect import bisect_left, bisect_right  # return index",
			"",
			"def search(t, i):",
			"\t'''存在するかどうかを返す",
			"\tt: list,   i: value'''",
			"\tix = bisect_right(t, i)",
			"\tif t[ix-1] != i:",
			"\t\treturn False",
			"\treturn True"
		],
		"description": "二分探索"
	},

	"(nCr) 組み合わせの数を返す": {
		"prefix": "combinations",
		"body": [
			"def cmb(n, r, MOD=1):",
			"\t'''",
			"\tnCrを求める",
			"\tMODはデフォルトで1",
			"\t'''",
			"\tnumerator = 1",
			"\tdenominator = 1",
			"\tfor l in range(r):",
			"\t\tnumerator *= (n - l)",
			"\t\tnumerator %= MOD",
			"\t\tdenominator *= (l + 1)",
			"\t\tdenominator %= MOD",
			"\tinv = pow(denominator ,MOD - 2 ,MOD)",
			"\treturn (numerator * inv) % MOD"
		],
		"description": "(nCr) 組み合わせの数を返す"
	},

	"幅優先探索(迷路)": {
		"prefix": "bfs_maze",
		"body": [
		  "from collections import deque",
		  "",
		  "H, W = map(int, input().split())",
		  "maze = ['#'+input()+'#' for _ in range(H)]",
		  "maze = ['#'*(W+2)] + maze + ['#'*(W+2)]",
		  "",
		  "visited = [[-1]*(W+2) for _ in range(H+2)]",
		  "",
		  "sx, sy, gy, gx = 0, 0, 0, 0",
		  "# warp = {}",
		  "# done_warp = set()",
		  "",
		  "def helper(v):",
		  "    for i in range(len(v)):",
		  "        print(*v[i])",
		  "",
		  "\"\"\"",
		  "for i in range(1, H+2):",
		  "    for j in range(1, W+2):",
		  "        if maze[i][j] == 'S':",
		  "            sy, sx = i, j",
		  "        elif maze[i][j] == 'G':",
		  "            gy, gx = i, j",
		  "        elif maze[i][j] != '.' and maze[i][j] != '#':",
		  "            if maze[i][j] in warp:",
		  "                warp[maze[i][j]].append([i, j])",
		  "            else:",
		  "                warp[maze[i][j]] = []",
		  "                warp[maze[i][j]].append([i, j])\"\"\"",
		  "",
		  "",
		  "def bfs(sy, sx, gy, gx, c, visited):",
		  "    visited[sy][sx] = 0",
		  "    Q = deque([])",
		  "    Q.append([sy, sx])",
		  "    while Q:",
		  "        y, x = Q.popleft()",
		  " ",
		  "        if [y, x] == [gy, gx]:",
		  "            return visited[y][x]",
		  "",
		  "        for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:",
		  "            if c[y+i][x+j] != '#' and visited[y+i][x+j] == -1:",
		  "                # 探索可能かつ未探索の場合",
		  "                visited[y+i][x+j] = visited[y][x]+1",
		  "                Q.append([y+i, x+j])",
		  "                ",
		  "        \"\"\"",
		  "        # ワープマス",
		  "        if c[y][x] != '.' and c[y][x] != 'S':",
		  "            tmp = c[y][x]",
		  "            if tmp not in done_warp:",
		  "                for i, j in warp[tmp]:",
		  "                    if i != y or j != x:",
		  "                        if visited[i][j] == -1:",
		  "                            visited[i][j] = visited[y][x]+1",
		  "                            Q.append([i, j])",
		  "                done_warp.add(tmp)\"\"\"",
		  "",
		  "ans = bfs(sy, sx, gy, gx, maze, visited)",
		  "",
		  "if ans:",
		  "    print(ans)",
		  "else:",
		  "    print(-1)",
		  ""
		],
		"description": "幅優先探索(迷路)"
	  },

	"幅優先探索(木)": {
		"prefix": "bfs_tree",
		"body": [
		  "graph = [[] for _ in range(N)]",
		  "pre = []",
		  "",
		  "for _ in range(M):",
		  "    A, B = map(int, input().split())",
		  "    graph[A-1].append(B-1)",
		  "    graph[B-1].append(A-1)",
		  "    ",
		  "def bfs_tree(graph,v=1):",
		  "    \"\"\"",
		  "    graph: グラフ",
		  "    v: スタート",
		  "    \"\"\"",
		  "    # 矢印がどこを向いているか",
		  "    # -1だと未探索",
		  "    arrow = [-1]*len(graph) ",
		  "    q = deque()",
		  "    q.append(v)",
		  "    arrow[v] = 0",
		  "    while q:",
		  " ",
		  "        now = q.popleft()",
		  "        for next_v in graph[now]:",
		  "            if arrow[next_v] != -1:",
		  "                continue",
		  "            else:",
		  "                q.append(next_v)",
		  "                arrow[next_v] = now",
		  "    return arrow"
		],
		"description": "幅優先探索(木)"
	  },

	"優先度付きキュー": {
		"prefix": "heapq",
		"body": [
			"from heapq import (",
			"\theapify,  # 優先度付きキューの生成",
			"\theappop,  # キューから値を取り出す",
			"\theappush,   # キューに値を格納",
			"\theappushpop,   # push -> popの順",
			"\theapreplace,   # pop -> pushの順",
			"\t)"
		],
		"description": "優先度付きキュー"
	},

	"bit全探索": {
		"prefix": "bit_all_search",
		"body": [
		  "from itertools import product",
		  "",
		  "# 2^N 列挙",
		  "for v in product([0, 1], repeat=N):",
		  "    pass",
		  "",
		  "# 3^N 列挙",
		  "for v in product([0, 1, 2], repeat=N):",
		  "    pass"
		],
		"description": "bit全探索"
	},

	"約数列挙": {
		"prefix": "divisors",
		"body": [
			"def divisors(n):",
			"\t'''約数列挙'''",
			"\tdiv = []",
			"\tfor i in range(1, int(n**0.5)+1):",
			"\t\tif n % i == 0:",
			"\t\t\tdiv.append(i)",
			"\t\t\tif i != n // i:",
			"\t\t\t\tdiv.append(n//i)",
			"",
			"\t# divisors.sort()  # ソートの必要あれば",
			"\treturn div"
		],
		"description": "約数列挙"
	},

	"再帰上限のup": {
		"prefix": "saiki",
		"body": [
			"import sys",
			"sys.setrecursionlimit(10**9)"
		],
		"description": "再帰上限のup"
	},

	"多次元配列のソート": {
		"prefix": "multi_sort",
		"body": [
		  "A = [[1, 2], [3, 1], [2, 5]]",
		  "B = sorted(A, key=lambda x: x[0]) # 0番目の要素でソート",
		  "C = sorted(A, key=lambda x: x[1]) # 1番目の要素でソート"
		],
		"description": "多次元配列のソート"
	},

	"二分木探索": {
		"prefix": "binary_tree",
		"body": [
		  "import random #入力整数列Aの生成に使用",
		  "",
		  "class Node:",
		  "    def __init__(self, data): #コンストラクタ",
		  "        self.data = data #ノードがもつ数値",
		  "        self.left = None #左エッジ",
		  "        self.right = None #右エッジ",
		  "",
		  "",
		  "class BST:",
		  "    def __init__(self, number_list): #コンストラクタ",
		  "        self.root = None #ルートノード初期化",
		  "        for node in number_list: #数値を持つ配列から二分木を生成",
		  "            self.insert(node) #挿入メソッドを使ってノードを挿入する",
		  "    #挿入",
		  "    def insert(self, data):",
		  "        n = self.root",
		  "        if n == None:",
		  "            self.root = Node(data)",
		  "            return",
		  "        else:",
		  "            while True:",
		  "                entry = n.data",
		  "                if data < entry:",
		  "                    if n.left is None:",
		  "                        n.left = Node(data)",
		  "                        return",
		  "                    n = n.left",
		  "                elif data > entry:",
		  "                    if n.right is None:",
		  "                        n.right = Node(data)",
		  "                        return",
		  "                    n = n.right",
		  "                else:",
		  "                    n.data = data",
		  "                    return",
		  "    #検索機能(インターフェース)",
		  "    def search(self, search):",
		  "        searcher = self._search_bool(search)",
		  "        if searcher is None:",
		  "            print(\"Search target is not found.\")",
		  "        elif searcher == True:",
		  "            print(str(search) + \" is found!\")",
		  "        elif searcher == False:",
		  "            print(str(search) + \" is not found.\")",
		  "",
		  "    #検索機能本体(出力:boolean),深さ優先探索",
		  "    #nodeのvisitedはpopで代用",
		  "    def _search_bool(self, search):",
		  "        n = self.root",
		  "        if n is None:",
		  "            return None",
		  "        else:",
		  "            lst = []",
		  "            lst.append(n)",
		  "            while len(lst) > 0:",
		  "                node = lst.pop()",
		  "                if node.data == search:",
		  "                    return True",
		  "                if node.right is not None:",
		  "                    lst.append(node.right)",
		  "                if node.left is not None:",
		  "                    lst.append(node.left)",
		  "            return False",
		  "",
		  "    def inorder(self,node): #中順探索 l->r->p^n",
		  "        if node is not None:",
		  "            self.inorder(node.left)",
		  "            print(node.data)",
		  "            self.inorder(node.right)"
		],
		"description": "二分木探索"
	  },

	  "UnionFind木": {
		"prefix": "unionfindtree",
		"body": [
		  "class UnionFind():",
		  "    def __init__(self, n):",
		  "        self.n = n",
		  "        self.parents = [-1] * n",
		  "    ",
		  "    # xの属する木の根を求める",
		  "    def find(self, x):",
		  "        if self.parents[x] < 0:",
		  "            return x",
		  "        else:",
		  "            self.parents[x] = self.find(self.parents[x])",
		  "            return self.parents[x]",
		  "    ",
		  "    # xとyの属する集合のマージ",
		  "    def union(self, x, y):",
		  "        x = self.find(x)",
		  "        y = self.find(y)",
		  " ",
		  "        if x == y:",
		  "            return",
		  " ",
		  "        if self.parents[x] > self.parents[y]:",
		  "            x, y = y, x",
		  " ",
		  "        self.parents[x] += self.parents[y]",
		  "        self.parents[y] = x",
		  "    ",
		  "    # xの属する集合の大きさを返す",
		  "    def size(self, x):",
		  "        return -self.parents[self.find(x)]",
		  "    ",
		  "    # xとyが同じ集合に属するかを判定",
		  "    def same(self, x, y):",
		  "        return self.find(x) == self.find(y)",
		  "    ",
		  "    # xと同じグループを返す",
		  "    def members(self, x):",
		  "        root = self.find(x)",
		  "        return [i for i in range(self.n) if self.find(i) == root]",
		  "    ",
		  "    # 根ノードを返す",
		  "    # 複数存在する時はその分だけ返す",
		  "    def roots(self):",
		  "        return [i for i, x in enumerate(self.parents) if x < 0]",
		  "    ",
		  "    # グループ数を返す",
		  "    def group_count(self):",
		  "        return len(self.roots())",
		  "    ",
		  "    # groupとそれに属するメンバーの辞書を返す",
		  "    # exp. {0: [0, 1, 4], 2: [2, 3]}",
		  "    def all_group_members(self):",
		  "        return {r: self.members(r) for r in self.roots()}",
		  "    ",
		  "    # 上記メソッド参照",
		  "    def __str__(self):",
		  "        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())"
		],
		"description": "UnionFind木"
	},

	"クラスカル法": {
		"prefix": "kuraskal",
		"body": [
		  "#union-find木",
		  "#クラスカル法にはUnion-find木が必要",
		  "class UnionFind:",
		  "    def __init__(self, n):",
		  "        self.par = [i for i in range(n)] #親",
		  "        self.rank = [0 for _ in range(n)] #根の深さ",
		  "",
		  "    #xの属する木の根を求める",
		  "    def find(self, x):",
		  "        if self.par[x] == x:",
		  "            return x",
		  "        else:",
		  "            self.par[x] = self.find(self.par[x])",
		  "            return self.par[x]",
		  "",
		  "    #xとyの属する集合のマージ",
		  "    def unite(self, x, y):",
		  "        x = self.find(x)",
		  "        y = self.find(y)",
		  "        if x == y:",
		  "            return",
		  "        if self.rank[x] < self.rank[y]:",
		  "            self.par[x] = y",
		  "        else:",
		  "            self.par[y] = x",
		  "            if self.rank[x] == self.rank[y]:",
		  "                self.rank[x] += 1",
		  "",
		  "    #xとyが同じ集合に属するかを判定",
		  "    def same(self, x, y):",
		  "        return self.find(x) == self.find(y)",
		  "",
		  "",
		  "#クラスカル法",
		  "# V: 頂点集合(リスト) E: 辺集合[始点, 終点, 重み](リスト)",
		  "class kruskal():",
		  "    def __init__(self, V, E):",
		  "        self.V = V",
		  "        self.E = E",
		  "        self.E.sort(key=lambda x: x[2]) #辺の重みでソート",
		  "",
		  "    def weight(self): #最小全域木の重み和を求める",
		  "        UF = UnionFind(len(V)) #頂点数でUnion Find Treeを初期化",
		  "        res = 0",
		  "        for i in range(len(self.E)):",
		  "            e = self.E[i]",
		  "",
		  "            if (UF.same(e[0], e[1])) == False:",
		  "                UF.unite(e[0], e[1])",
		  "                res += e[2]",
		  "",
		  "        return res",
		  "",
		  "    def edge(self):",
		  "        UF = UnionFind(len(self.V)) #頂点数でUnion Find Treeを初期化",
		  "        res_E = []",
		  "        for i in range(len(self.E)):",
		  "            e = self.E[i]",
		  "",
		  "            if (UF.same(e[0], e[1])) == False:",
		  "                UF.unite(e[0], e[1])",
		  "                res_E.append(e)",
		  "",
		  "        return res_E",
		  "",
		  "    def node(self):",
		  "        UF = UnionFind(len(V)) #頂点数でUnion Find Treeを初期化",
		  "        res_V = []",
		  "        for i in range(len(E)):",
		  "            e = E[i]",
		  "",
		  "            if (UF.same(e[0], e[1])) == False:",
		  "                UF.unite(e[0], e[1])",
		  "                res_V.append(e[0])",
		  "                res_V.append(e[1])",
		  "",
		  "        return list(set(res_V))"
		],
		"description": "クラスカル法"
	},

	"ワーシャルフロイド法": {
		"prefix": "warshall_floyd",
		"body": [
		  "#d[i][j]は2頂点間i, j間の移動コストを格納, Vは頂点数",
		  "def warshall_floyd(d, V): ",
		  "    for k in range(V):",
		  "        for i in range(V):",
		  "            for j in range(V):",
		  "                d[i][j] = min(d[i][j], d[i][k] + d[k][j])",
		  "",
		  "    return d #d[i][j]に頂点i, j間の最短距離を格納"
		],
		"description": "ワーシャルフロイド法"
	},

	"点と直線関係": {
		"prefix": "point_line",
		"body": [
		  "def get_line_formula(x1, y1, x2, y2):",
		  "    \"\"\"",
		  "    (x1, y1)と(x2, y2)の2点を通過する直線の式",
		  "    a*x + b*y +c = 0",
		  "    return a, b, c",
		  "    \"\"\"",
		  "    # x軸と並行",
		  "    if y1==y2:",
		  "        return 0, 1, -y1",
		  "    # y軸と並行",
		  "    elif x1==x2:",
		  "        return 1, 0, -x1",
		  "    else:",
		  "        a = (-(y1 - y2)) / (x1 - x2)",
		  "        b = 1",
		  "        c = - (a * x1) - y1",
		  "        return a, b, c",
		  "",
		  "",
		  "def get_point_line_distance(x, y, a, b, c):",
		  "    \"\"\"",
		  "    直線: a*x + b*y + c = 0",
		  "    点: x, y",
		  "    の距離を返す",
		  "    \"\"\"",
		  "    return abs(a*x + b*y + c) / ((a**2 + b**2) ** 0.5)"
		],
		"description": "点と直線関係"
	},

	"深さ優先探索（not再帰）": {
		"prefix": "bfs",
		"body": [
		  "from collections import deque",
		  "",
		  "# 深さ優先探索ではスタックを使用",
		  "# 一番最後に積み重なったものから探索=深さ優先",
		  "data = deque([0])",
		  "",
		  "while len(data) > 0:",
		  "    pos = data.pop()",
		  "    print(pos, end=' ')",
		  "    for i in tree[pos]:",
		  "        data.append(i)"
		],
		"description": "深さ優先探索（not再帰）"
	},

	"完全数の判定": {
		"prefix": "check_perfect",
		"body": [
		  "def check_perfect(n):",
		  "    n_sqrt = int(n**0.5)",
		  "    total = 1",
		  "    for i in range(2, n_sqrt+1):",
		  "        if n%i == 0:",
		  "            total += i",
		  "            total += n//i",
		  "    ",
		  "    if n_sqrt**2 == n:",
		  "        total -= n_sqrt",
		  "",
		  "    if total == n:",
		  "        return 'Perfect'",
		  "    elif total < n:",
		  "        return 'Deficient'",
		  "    else:",
		  "        return 'Abundant'"
		],
		"description": "完全数の判定"
	},

	"任意の文字列含むか判定": {
		"prefix": "pattern_match",
		"body": [
		  "import re",
		  "",
		  "def pattern_match(s):",
		  "    # .*は任意の文字列",
		  "    pattern = re.compile('.*okyo.*ech.*')",
		  "    return re.search(pattern, s)"
		],
		"description": "任意の文字列含むか判定"
	},

	"約数・公約数の列挙": {
		"prefix": "yakusu_rekkyo",
		"body": [
		  "from math import gcd",
		  "",
		  "",
		  "def make_divisors(n):",
		  "    \"\"\"",
		  "    約数の高速列挙",
		  "    \"\"\"",
		  "    lower_divisors , upper_divisors = [], []",
		  "    i = 1",
		  "    while i*i <= n:",
		  "        if n % i == 0:",
		  "            lower_divisors.append(i)",
		  "            if i != n // i:",
		  "                upper_divisors.append(n//i)",
		  "        i += 1",
		  "    return lower_divisors + upper_divisors[::-1]",
		  "",
		  "",
		  "def common_divisors(a, b):",
		  "    \"\"\"",
		  "    公約数の高速列挙",
		  "    A, Bの公約数 = GCD(A, B)の約数",
		  "    \"\"\"",
		  "    n_gcd = gcd(a, b)",
		  "    return make_divisors(n_gcd)"
		],
		"description": "約数・公約数の列挙"
	},

	"範囲Nまでの素数を高速列挙": {
		"prefix": "search_prime",
		"body": [
		  "import numpy as np",
		  "",
		  "def seachPrimeNum(N):",
		  "    max = int(np.sqrt(N))",
		  "    seachList = [i for i in range(2,N+1)]",
		  "    primeNum = []",
		  "    while seachList[0] <= max:",
		  "        primeNum.append(seachList[0])",
		  "        tmp = seachList[0]",
		  "        seachList = [i for i in seachList if i % tmp != 0]",
		  "    primeNum.extend(seachList)",
		  "    return primeNum"
		],
		"description": "範囲Nまでの素数を高速列挙"
	},

	"素数列挙；エラトステレスの篩": {
		"prefix": "eratosthenes",
		"body": [
		  "# O(NloglogN)",
		  "def eratosthenes_sieve(n):",
		  "    is_prime = [True] * (n + 1)",
		  "    is_prime[0] = is_prime[1] = False",
		  "    for p in range(2, n + 1):",
		  "        if is_prime[p]:",
		  "            for q in range(2 * p, n + 1, p):",
		  "                is_prime[q] = False",
		  "    return is_prime",
		  "",
		  "",
		  "n = 10",
		  "prime_table = eratosthenes_sieve(n)",
		  "",
		  "print(prime_table)",
		  "# [False, False, True, True, False, True, False, True, False, False, False]"
		],
		"description": "素数列挙；エラトステレスの篩"
	  },

	  "累積和": {
		"prefix": "cumsum",
		"body": [
		  "# pythonで累積和",
		  "import numpy as np",
		  "",
		  "\"\"\"",
		  "よく似た関数として、",
		  "numpyには累積の積を返すcumprodが用意されており、",
		  "さらにpandasの方にはcumprodに加えて、",
		  "そこまでの最大値と最小値を得られる",
		  "cummax, cumminが用意されています。",
		  "\"\"\"",
		  "",
		  "cumsumA = list(np.array(A).cumsum())"
		],
		"description": "累積和"
	  }
}